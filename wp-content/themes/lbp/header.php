<!DOCTYPE html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo('charset'); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php wp_title(); ?></title>
    <?php wp_head(); ?>
</head>
<body <?php body_class(); ?>>
<?php wp_body_open(); ?>

<?php
    $skyColor = $_COOKIE['skyColor']??'51,51,51';
    $isBright = ($_COOKIE['isBright']??'true') == 'true';
?>
<header class="site-header <?=$isBright ? '__bright' : '__dark'?>" style="background: rgb(<?=$skyColor?>);">

    <div class="site-header-content">

        <div class="super-logo">
            <div id="super-logo-bg">
                <div class="gradient top"></div>
                <div class="gradient bottom"></div>
                <div class="gradient left" style="background: linear-gradient(to left, rgba(<?=$skyColor?>, 0), rgba(<?=$skyColor?>, 1));"></div>
                <div class="gradient right" style="background: linear-gradient(to right, rgba(<?=$skyColor?>, 0), rgba(<?=$skyColor?>, 1));"></div>
            </div>
            <?php
            if (function_exists('the_custom_logo')) {
                the_custom_logo();
            }
            ?>
            <?php 
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞—Ä—è
            $is_dictionary_page = false;
            
            // –°–ø–æ—Å–æ–± 1: –ø—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞
            if (is_page_template('page-dictionary.php')) {
                $is_dictionary_page = true;
            }
            
            // –°–ø–æ—Å–æ–± 2: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ slug —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (is_page() && get_page_template_slug() === 'page-dictionary.php') {
                $is_dictionary_page = true;
            }
            
            // –°–ø–æ—Å–æ–± 3: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL
            if (isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], 'dictionary') !== false) {
                $is_dictionary_page = true;
            }
            
            // –°–ø–æ—Å–æ–± 4: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ react-app-dictionary –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (isset($_POST) || isset($_GET)) {
                $is_dictionary_page = true; // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            ?>
            
        </div>

        <!-- –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Å—ã–ª–∫–∏ —Å–ª–æ–≤–∞—Ä—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏) -->
        <?php if (is_page_template('page-dictionary.php')): ?>
            <div class="dictionary-refresh-container">
                <a href="<?php echo esc_url(add_query_arg('refresh', time())); ?>" class="dictionary-refresh-link" title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º">
                    üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å
                </a>
            </div>
        <?php endif; ?>

        <nav class="site-navigation <?=$isBright ? '__dark' : ''?>">
            <button id="menu-toggle" class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
                <span class="menu-icon">‚ò∞</span><span class="menu-text"> Menu</span>
            </button>
            <?php
            wp_nav_menu(array(
                'theme_location' => 'menu-1',
                'menu_id'        => 'primary-menu',
            ));
            ?>
        </nav>
        
        <!-- –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ -->
        <button id="language-selector-btn" class="language-selector-btn" aria-label="–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫">
            üåê <span class="current-lang-code"><?php echo esc_html($_COOKIE['selected_lang'] ?? 'LV'); ?></span>
        </button>

        <!-- React Header Container -->
        <div id="react-header-root" class="react-header-container"></div>

    </div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ -->
<div id="language-modal" class="language-modal">
    <div class="language-modal-overlay"></div>
    <div class="language-modal-content">
        <button class="language-modal-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
        <h2>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</h2>
        <div class="language-banners">
            <?php
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é menu-langs
            $menu_items = wp_get_nav_menu_items(wp_get_nav_menu_object('menu-langs'));
            
            if (!$menu_items) {
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ theme_location
                $locations = get_nav_menu_locations();
                if (isset($locations['menu-langs'])) {
                    $menu_items = wp_get_nav_menu_items($locations['menu-langs']);
                }
            }
            
            if ($menu_items) {
                foreach ($menu_items as $item) {
                    $post_id = $item->object_id;
                    $logo = get_field('logo', $item); // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
                    if (!$logo) {
                        $logo = get_field('logo', $post_id); // –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    }
                    $logo_effect = get_field('logo_effect', $item);
                    if (!$logo_effect) {
                        $logo_effect = get_field('logo_effect', $post_id);
                    }
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
                    $lang_code = get_field('learn_lang', $post_id);
                    if (!$lang_code) {
                        // –ü—Ä–æ–±—É–µ–º –∏–∑ URL –∏–ª–∏ slug
                        $url = parse_url($item->url, PHP_URL_PATH);
                        if (strpos($url, 'latvieshu') !== false || strpos($url, 'latviesh') !== false) {
                            $lang_code = 'LV';
                        } elseif (strpos($url, 'english') !== false || strpos($url, 'angl') !== false) {
                            $lang_code = 'EN';
                        } else {
                            $lang_code = 'LV'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        }
                    }
                    
                    // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å - –ø—Ä–æ–±—É–µ–º –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é –∏ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    $level = get_field('level', $item) ?: get_field('level', $post_id);
                    $level_text = '';
                    if ($level) {
                        $levels = [1 => 'A1', 2 => 'A2', 3 => 'B1', 4 => 'B2', 5 => 'C1', 6 => 'C2'];
                        $level_text = $levels[$level] ?? '';
                    }
                    // –ï—Å–ª–∏ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "B2" –≤ —Å–∫–æ–±–∫–∞—Ö –≤ title)
                    if (!$level_text && strpos($item->title, '(') !== false) {
                        if (preg_match('/\(([A-C][12])\)/', $item->title, $matches)) {
                            $level_text = $matches[1];
                        }
                    }
                    // –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ - "B2"
                    if (!$level_text) {
                        $level_text = 'B2';
                    }
                    
                    if ($logo) {
                        ?>
                        <div class="language-banner menu-langs-banner" data-lang="<?php echo esc_attr($lang_code); ?>">
                            <div class="language-banner-inner">
                                <h2><span class="wrap-h2"><?php echo esc_html($item->title); ?><span class="small">(<?php echo esc_html($level_text); ?>)</span></span></h2>
                                <div class="image-container cursor-effect-mask-container">
                                    <img src="<?php echo esc_url($logo['url'] ?? $logo); ?>" 
                                         alt="<?php echo esc_attr($logo['alt'] ?? $item->title); ?>" 
                                         class="menu-langs-img">
                                    <svg class="line-animation" viewBox="0 0 100 100">
                                        <rect x="2" y="2" width="96" height="96" rx="5" ry="5" class="line"></rect>
                                    </svg>
                                    <?php if ($logo_effect): ?>
                                    <div class="cursor-effect-mask">
                                        <img src="<?php echo esc_url($logo_effect['url'] ?? $logo_effect); ?>" 
                                             alt="<?php echo esc_attr($logo_effect['alt'] ?? ''); ?>">
                                    </div>
                                    <?php endif; ?>
                                </div>
                            </div>
                        </div>
                        <?php
                    }
                }
            }
            ?>
        </div>
    </div>
</div>

<script>
// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('DOMContentLoaded', function() {
    const menuToggle = document.getElementById('menu-toggle');
    const primaryMenu = document.getElementById('primary-menu');
    
    if (menuToggle && primaryMenu) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–µ–Ω—é
        document.addEventListener('click', function(event) {
            if (!menuToggle.contains(event.target) && !primaryMenu.contains(event.target)) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
                const isOpen = menuToggle.getAttribute('aria-expanded') === 'true';
                if (isOpen) {
                    menuToggle.setAttribute('aria-expanded', 'false');
                    primaryMenu.classList.remove('open');
                }
            }
        });
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    const langModal = document.getElementById('language-modal');
    const langBtn = document.getElementById('language-selector-btn');
    const langClose = langModal?.querySelector('.language-modal-close');
    const langBanners = langModal?.querySelectorAll('.language-banner');
    const currentLangCode = document.querySelector('.current-lang-code');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –∫—É–∫–∏ –∏–ª–∏ LV –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    function getSelectedLang() {
        const cookies = document.cookie.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = value;
            return acc;
        }, {});
        return cookies['selected_lang'] || 'LV';
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –∫—É–∫–∏
    function setLanguage(lang) {
        document.cookie = `selected_lang=${lang}; path=/; max-age=31536000`; // 1 –≥–æ–¥
        if (currentLangCode) {
            currentLangCode.textContent = lang;
        }
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        langModal?.classList.remove('active');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        window.location.reload();
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (langBtn) {
        langBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            langModal?.classList.add('active');
        });
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (langClose) {
        langClose.addEventListener('click', function() {
            langModal?.classList.remove('active');
        });
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay
    if (langModal) {
        langModal.addEventListener('click', function(e) {
            if (e.target.classList.contains('language-modal-overlay')) {
                langModal.classList.remove('active');
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if (langBanners) {
        langBanners.forEach(banner => {
            banner.addEventListener('click', function() {
                const lang = this.dataset.lang;
                setLanguage(lang);
            });
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const currentLang = getSelectedLang();
    if (currentLangCode) {
        currentLangCode.textContent = currentLang;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞ –≤ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–µ –¥–ª—è React-—Å—Ç—Ä–∞–Ω–∏—Ü)
    function addMobileLangButton() {
        console.log('Trying to add mobile lang button...');
        
        const primaryMenu = document.getElementById('primary-menu');
        console.log('Primary menu found:', primaryMenu);
        
        if (!primaryMenu) {
            console.log('Primary menu not found!');
            return;
        }
        
        const hasReactControls = document.getElementById('cheat-sheet-mobile-controls') || 
                                document.getElementById('grammar-tables-mobile-controls');
        
        if (hasReactControls) {
            console.log('React controls found, skipping');
            return; // –ù–∞ React —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
        }
        
        if (document.getElementById('default-mobile-lang-controls')) {
            console.log('Mobile lang button already exists');
            return; // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π —è–∑—ã–∫–∞
        const mobileLangItem = document.createElement('li');
        mobileLangItem.className = 'menu-item-mobile-controls';
        mobileLangItem.id = 'default-mobile-lang-controls';
        
        const wrapper = document.createElement('div');
        wrapper.className = 'mobile-controls-wrapper';
        
        const langButton = document.createElement('button');
        langButton.className = 'mobile-lang-btn';
        langButton.innerHTML = `üåê <span class="current-lang-code-mobile">${currentLang}</span>`;
        langButton.addEventListener('click', function(e) {
            e.stopPropagation();
            if (langModal) {
                langModal.classList.add('active');
            }
        });
        
        wrapper.appendChild(langButton);
        mobileLangItem.appendChild(wrapper);
        primaryMenu.appendChild(mobileLangItem);
        
        console.log('‚úÖ Mobile lang button added to menu!');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
        const checkWidth = () => {
            const isMobile = window.innerWidth < 1200;
            mobileLangItem.style.display = isMobile ? 'block' : 'none';
            console.log('Width check:', window.innerWidth, 'isMobile:', isMobile, 'display:', mobileLangItem.style.display);
        };
        
        checkWidth();
        window.addEventListener('resize', checkWidth);
    }
    
    // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', addMobileLangButton);
    } else {
        addMobileLangButton();
    }
    
    setTimeout(addMobileLangButton, 50);
    setTimeout(addMobileLangButton, 200);
    setTimeout(addMobileLangButton, 500);
    setTimeout(addMobileLangButton, 1000);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å" - –¥–µ–ª–∞–µ—Ç —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const dictionaryRefreshLink = document.querySelector('.dictionary-refresh-link');
    if (dictionaryRefreshLink) {
        dictionaryRefreshLink.addEventListener('click', function(e) {
            e.preventDefault();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            // history.length > 1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ + —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è)
            if (window.history.length > 1 || window.history.state) {
                window.history.back();
            }
        });
    }
});
</script>

</header>
</body>
</html>