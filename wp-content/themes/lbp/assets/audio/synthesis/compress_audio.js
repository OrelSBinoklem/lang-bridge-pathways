const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const FFMPEG_PATH = 'C:\\ospanel2\\addons\\FFMpeg-7.1\\ffmpeg.exe';
const BITRATE = '48k';
const AUDIO_DIRS = [
  './en/audio'
  // './lv/audio'  // –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
];
const DRY_RUN = false; // true = —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
const BACKUP_DIR = './originals'; // –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤

console.log('=== Audio Compression Tool ===\n');
console.log(`–†–µ–∂–∏–º: ${DRY_RUN ? '–¢–ï–°–¢–û–í–´–ô (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' : '–†–ï–ê–õ–¨–ù–û–ï –°–ñ–ê–¢–ò–ï'}`);
console.log(`–ë–∏—Ç—Ä–µ–π—Ç: ${BITRATE}`);
console.log(`–ü–∞–ø–∫–∏: ${AUDIO_DIRS.join(', ')}`);
console.log(`–ë—ç–∫–∞–ø—ã: ${BACKUP_DIR}\n`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg
if (!fs.existsSync(FFMPEG_PATH)) {
  console.error(`‚úó ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${FFMPEG_PATH}`);
  process.exit(1);
}
console.log(`‚úì ffmpeg –Ω–∞–π–¥–µ–Ω: ${FFMPEG_PATH}`);

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
if (!fs.existsSync(BACKUP_DIR)) {
  fs.mkdirSync(BACKUP_DIR, { recursive: true });
  console.log(`‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: ${BACKUP_DIR}\n`);
} else {
  console.log(`‚úì –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${BACKUP_DIR}\n`);
}

let totalFiles = 0;
let processedFiles = 0;
let errorFiles = 0;
let totalSizeBefore = 0;
let totalSizeAfter = 0;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
AUDIO_DIRS.forEach(dir => {
  if (!fs.existsSync(dir)) {
    console.log(`‚ö† –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dir}\n`);
    return;
  }

  console.log(`\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${dir}`);
  console.log('‚îÄ'.repeat(60));

  const files = fs.readdirSync(dir).filter(f => f.endsWith('.mp3'));
  totalFiles += files.length;
  console.log(`–ù–∞–π–¥–µ–Ω–æ MP3 —Ñ–∞–π–ª–æ–≤: ${files.length}\n`);

  files.forEach((file, index) => {
    const filePath = path.join(dir, file);
    const tempPath = path.join(dir, `temp_${file}`);
    
    // –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∞–ø–∫—É –≤ BACKUP_DIR, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const relativePath = path.relative('.', dir);
    const backupSubDir = path.join(BACKUP_DIR, relativePath);
    const backupPath = path.join(backupSubDir, file);

    try {
      const statsBefore = fs.statSync(filePath);
      const sizeBefore = statsBefore.size;
      totalSizeBefore += sizeBefore;

      if (!DRY_RUN) {
        // –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(backupSubDir)) {
          fs.mkdirSync(backupSubDir, { recursive: true });
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const command = `"${FFMPEG_PATH}" -i "${filePath}" -b:a ${BITRATE} -ar 22050 -ac 1 "${tempPath}" -y -loglevel error`;
        execSync(command, { stdio: 'inherit' });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (!fs.existsSync(tempPath)) {
          throw new Error('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');
        }

        const statsAfter = fs.statSync(tempPath);
        const sizeAfter = statsAfter.size;
        totalSizeAfter += sizeAfter;

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ –ø–∞–ø–∫—É –±—ç–∫–∞–ø–æ–≤
        if (!fs.existsSync(backupPath)) {
          fs.renameSync(filePath, backupPath);
        } else {
          // –ï—Å–ª–∏ –±—ç–∫–∞–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
          fs.unlinkSync(filePath);
        }
        
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        fs.renameSync(tempPath, filePath);

        const reduction = ((1 - sizeAfter / sizeBefore) * 100).toFixed(1);
        console.log(`‚úì [${index + 1}/${files.length}] ${file}`);
        console.log(`  ${(sizeBefore / 1024).toFixed(1)}KB ‚Üí ${(sizeAfter / 1024).toFixed(1)}KB (‚àí${reduction}%)`);

        processedFiles++;
      } else {
        console.log(`[${index + 1}/${files.length}] ${file} (${(sizeBefore / 1024).toFixed(1)}KB)`);
        processedFiles++;
      }
    } catch (error) {
      console.error(`‚úó [${index + 1}/${files.length}] –û—à–∏–±–∫–∞: ${file}`);
      console.error(`  ${error.message}`);
      errorFiles++;

      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (fs.existsSync(tempPath)) {
        fs.unlinkSync(tempPath);
      }
    }
  });
});

// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
console.log('\n' + '‚ïê'.repeat(60));
console.log('–ò–¢–û–ì–û:');
console.log('‚îÄ'.repeat(60));
console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedFiles}`);
console.log(`–û—à–∏–±–æ–∫: ${errorFiles}`);

if (!DRY_RUN && totalSizeBefore > 0) {
  const totalReduction = ((1 - totalSizeAfter / totalSizeBefore) * 100).toFixed(1);
  console.log(`\n–†–∞–∑–º–µ—Ä –¥–æ:  ${(totalSizeBefore / 1024 / 1024).toFixed(2)} MB`);
  console.log(`–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: ${(totalSizeAfter / 1024 / 1024).toFixed(2)} MB`);
  console.log(`–≠–∫–æ–Ω–æ–º–∏—è: ${totalReduction}% (${((totalSizeBefore - totalSizeAfter) / 1024 / 1024).toFixed(2)} MB)`);
  console.log(`\nüí° –û—Ä–∏–≥–∏–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: ${BACKUP_DIR}`);
  console.log(`   –ï—Å–ª–∏ –≤—Å—ë OK, –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é`);
}

console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!\n');

