require("dotenv").config();
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const slugify = require("slugify");

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ slugify
slugify.extend({
  "#": "-number-",
  "@": "-at-",
  "!": "-excl-",
  "?": "-q-",
  "&": "-and-",
  "%": "-percent-",
  "$": "-dollar-",
  "‚Äô": "-",
  "'": "-",
  "ƒÅ": "aa",
  "ƒç": "ch",
  "ƒì": "ee",
  "ƒ£": "gj",
  "ƒ´": "ii",
  "ƒ∑": "kj",
  "ƒº": "lj",
  "≈Ü": "nj",
  "≈°": "sh",
  "≈´": "uu",
  "≈æ": "zh",
  "ƒÄ": "Aa",
  "ƒå": "Ch",
  "ƒí": "Ee",
  "ƒ¢": "Gj",
  "ƒ™": "Ii",
  "ƒ∂": "Kj",
  "ƒª": "Lj",
  "≈Ö": "Nj",
  "≈†": "Sh",
  "≈™": "Uu",
  "≈Ω": "Zh"
});

const AUDIO_DIR = path.join(__dirname, "lv/audio");
const JSON_FILE_PATH = path.join(__dirname, "lv/dictionary_9.json");
const LISTNR_API_URL = "https://bff.listnr.tech/api/tts/v1/convert-text";

// ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
const VOICE_ID = "lv-lv-Standard-A"; // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
const AUDIO_FORMAT = "mp3";

// üîπ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**
const START_INDEX = 6000; // –ù–∞—á–∞—Ç—å —Å —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
const WORD_COUNT = 1000;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

// üìÇ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É audio, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(AUDIO_DIR)) {
  fs.mkdirSync(AUDIO_DIR, { recursive: true });
}

// üì• –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
const data = JSON.parse(fs.readFileSync(JSON_FILE_PATH, "utf8"));

// üî• **–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π** –ø–æ `slugify`
const uniqueWords = new Map();

data.forEach((item) => {
  if (item.word) {
    let cleanWord = item.word.trim().replace(/[\?!\.]+$/, "").trim();
    let slugifiedWord = slugify(cleanWord, { lower: true, strict: true });

    if (!uniqueWords.has(slugifiedWord)) {
      uniqueWords.set(slugifiedWord, { ...item, word: cleanWord });
    }
  }
});

// üìå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
const uniqueData = Array.from(uniqueWords.values());

console.log(`üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: ${uniqueData.length}`);

// ‚úÇÔ∏è **–§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É**
const wordsToProcess = uniqueData.slice(START_INDEX, START_INDEX + WORD_COUNT);
console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ —Å ${START_INDEX} –ø–æ ${START_INDEX + WORD_COUNT - 1}`);

// üîπ **–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ Listnr API**
async function synthesizeSpeech(word) {
  try {
    const response = await axios.post(
      LISTNR_API_URL,
      {
        voice: VOICE_ID,
        ssml: `<speak><prosody rate="slow"><p>${word}</p></prosody></speak>`,
        audioFormat: AUDIO_FORMAT,
		audioSampleRate: 48000
      },
      {
        headers: {
          "x-listnr-token": process.env.LISTNR_API_KEY,
          "Content-Type": "application/json"
        }
      }
    );

	//console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç API:", response.data);

    return response.data.url; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ MP3
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ "${word}":`, error.response?.data || error.message);
    return null;
  }
}

// üéµ **–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3-—Ñ–∞–π–ª–∞**
async function downloadAudio(url, filePath) {
  try {
    console.log(`üîó –ó–∞–≥—Ä—É–∂–∞–µ–º MP3: ${url}`);

    const response = await axios.get(url, { responseType: "stream" });

    if (response.status !== 200) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MP3! –ö–æ–¥: ${response.status}`);
      return;
    }

    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
      writer.on("finish", () => {
        console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filePath}`);
        resolve();
      });
      writer.on("error", reject);
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MP3:`, error.message);
  }
}


// üöÄ **–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å**
(async () => {
  for (const item of wordsToProcess) {
    if (item.word) {
      console.log(`üé§ –û–∑–≤—É—á–∏–≤–∞–µ–º: ${item.word}`);

      // üî• –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MP3-—Ñ–∞–π–ª
      const audioUrl = await synthesizeSpeech(item.word);
      if (!audioUrl) continue;

      // üè∑ **–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞**
      const fileName = slugify(item.word, { lower: true, strict: true }) + ".mp3";
      const filePath = path.join(AUDIO_DIR, fileName);

      // üì• **–°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º MP3-—Ñ–∞–π–ª**
	  //console.log(`üîó –ü–æ–ª—É—á–µ–Ω URL MP3: ${audioUrl}`);
	  //console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤: ${filePath}`);


      await downloadAudio(audioUrl, filePath);
      console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${fileName}`);
    }
  }
})();
