import axios from "axios";
import TrainingInterface from "../components/TrainingInterface";
import WordRow from "../components/WordRow";
import WordManagement from "../components/WordManagement";
import HelpModal from "../components/HelpModal";
import { getCustomCategoryComponent } from "../custom/config/customComponents";
import { normalizeString, getCooldownTime, formatTime as formatTimeHelper, getWordDisplayStatusExamen } from "../custom/utils/helpers";

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ production)
import { testWords, testUserData, testDisplayStatuses, additionalTestWords } from "./testData";
const ENABLE_TEST_DATA = true; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ false, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏

const { useEffect, useState } = wp.element;

const Examen = ({ categoryId, dictionaryId, userWordsData = {}, dictionaryWords = [], onRefreshUserData, onRefreshDictionaryWords }) => {
  const [editingWordId, setEditingWordId] = useState(null); // ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–ª–æ–≤–∞
  const [trainingMode, setTrainingMode] = useState(false); // –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const [currentWord, setCurrentWord] = useState(null); // –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const [userAnswer, setUserAnswer] = useState(''); // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [showResult, setShowResult] = useState(false); // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const [isCorrect, setIsCorrect] = useState(false); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
  const [currentMode, setCurrentMode] = useState(null); // –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–ø—Ä—è–º–æ–π/–æ–±—Ä–∞—Ç–Ω—ã–π)
  const [attemptCount, setAttemptCount] = useState(0); // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
  const [currentTime, setCurrentTime] = useState(Date.now()); // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
  const [showHelp, setShowHelp] = useState(false); // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

  // –õ–æ–≥–∏—Ä—É–µ–º ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  useEffect(() => {
    console.log('üìä Examen - dictionaryId:', dictionaryId, 'categoryId:', categoryId);
  }, [dictionaryId, categoryId]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(Date.now());
    }, 10000);
    return () => clearInterval(interval);
  }, []);

  const toggleEdit = (id) => {
    setEditingWordId((prevId) => (prevId === id ? null : id));
  };

  // –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
  const handleDeleteWord = async (wordId) => {
    try {
      const formData = new FormData();
      formData.append('action', 'delete_word');
      formData.append('word_id', wordId);

      const response = await axios.post(window.myajax.url, formData);
      
      if (response.data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        if (onRefreshDictionaryWords) {
          onRefreshDictionaryWords();
        }
      } else {
        alert('–û—à–∏–±–∫–∞: ' + (response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'));
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ helpers)
  const formatTime = formatTimeHelper;

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ (correct_attempts >= 2 –ò–õ–ò correct_attempts_revert >= 2)
  const isWordLearned = (wordId) => {
    const userData = userWordsData[wordId];
    if (!userData) return false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ >= 2 —Ä–∞–∑ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    return userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2;
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getWordDisplayStatus = (wordId) => {
    return getWordDisplayStatusExamen(userWordsData[wordId], currentTime);
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏–∑—É—á–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–∫–∞—Ç –∑–∞–∫–æ–Ω—á–µ–Ω)
  const getTrainingWords = () => {
    const categoryWords = dictionaryWords.filter(word => {
      if (categoryId === 0) return true;
      const categoryIdNum = parseInt(categoryId);
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞ category_ids, —Ç–∞–∫ –∏ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ category_id
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—á–Ω—ã–π category_id
      if (word.category_id !== undefined) {
        return parseInt(word.category_id) === categoryIdNum;
      }
      // –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ category_ids (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ category_id –Ω–µ—Ç)
      if (Array.isArray(word.category_ids) && word.category_ids.length > 0) {
        return word.category_ids.some(id => parseInt(id) === categoryIdNum);
      }
      return false;
    });

    const trainingWords = categoryWords.filter(word => {
      const displayStatus = getWordDisplayStatus(word.id);
      // –í–∫–ª—é—á–∞–µ–º –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ –∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑—É—á–µ–Ω–Ω—ã–µ
      return !displayStatus.fullyLearned && (!displayStatus.cooldownDirect || !displayStatus.cooldownRevert);
    });

    return trainingWords;
  };

  // –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  const startTraining = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!window.myajax || !window.myajax.is_logged_in) {
      alert('–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –ò–õ–ò —Å–æ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    const categoryWords = dictionaryWords.filter(word => {
      if (categoryId === 0) return true;
      const categoryIdNum = parseInt(categoryId);
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞ category_ids, —Ç–∞–∫ –∏ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ category_id
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—á–Ω—ã–π category_id
      if (word.category_id !== undefined) {
        return parseInt(word.category_id) === categoryIdNum;
      }
      // –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ category_ids (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ category_id –Ω–µ—Ç)
      if (Array.isArray(word.category_ids) && word.category_ids.length > 0) {
        return word.category_ids.some(id => parseInt(id) === categoryIdNum);
      }
      return false;
    });
    
    // –°–ª–æ–≤–∞ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –ò–õ–ò —Å–æ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryWords.length);
    
    const wordsToInitialize = categoryWords.filter(word => {
      const userData = userWordsData[word.id];
      
      if (!userData) {
        // –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        console.log(`‚úÖ –°–ª–æ–≤–æ ID=${word.id} (${word.word}) - –ù–ï–¢ –ó–ê–ü–ò–°–ò –≤ –ë–î`);
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å "—Å–±—Ä–æ—à–µ–Ω–Ω–æ–π":
      // attempts = 0 –ò attempts_revert = 0 –ò correct_attempts = 0 –ò correct_attempts_revert = 0
      // –ò last_shown = null/–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞/'0000-00-00 00:00:00' (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞)
      const isResetState = (
        userData.mode_education === 0 &&
        userData.mode_education_revert === 0 &&
        userData.attempts === 0 && 
        userData.attempts_revert === 0 && 
        userData.correct_attempts === 0 && 
        userData.correct_attempts_revert === 0 &&
        (userData.last_shown === null || userData.last_shown === '' || userData.last_shown === '0000-00-00 00:00:00') &&
        (userData.last_shown_revert === null || userData.last_shown_revert === '' || userData.last_shown_revert === '0000-00-00 00:00:00')
      );
      
      console.log(`üîç –°–ª–æ–≤–æ ID=${word.id} (${word.word}):`, {
        attempts: userData.attempts,
        attempts_revert: userData.attempts_revert,
        correct_attempts: userData.correct_attempts,
        correct_attempts_revert: userData.correct_attempts_revert,
        last_shown: userData.last_shown,
        last_shown_revert: userData.last_shown_revert,
        isResetState
      });
      
      return isResetState;
    });
    
    if (wordsToInitialize.length > 0) {
      console.log(`üÜï –ù–∞–π–¥–µ–Ω–æ ${wordsToInitialize.length} —Å–ª–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞)`);
      console.log('üìã –°–ª–æ–≤–∞:', wordsToInitialize.map(w => `ID=${w.id}, word=${w.word}`));
      
      try {
        const wordIds = wordsToInitialize.map(w => w.id);
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º word_ids:', wordIds);
        
        const formData = new FormData();
        formData.append('action', 'create_easy_mode_for_new_words');
        formData.append('word_ids', JSON.stringify(wordIds));
        
        console.log('üì§ FormData action:', formData.get('action'));
        console.log('üì§ FormData word_ids:', formData.get('word_ids'));
        
        const response = await axios.post(window.myajax.url, formData);
        
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
        
        if (response.data.success) {
          console.log('‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
          console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (onRefreshUserData) {
            console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            await onRefreshUserData();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "üìö –£—á—É"');
          }
        } else {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', response.data.message);
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', err);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response?.data || err.message);
      }
    } else {
      console.log('‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    const trainingWords = getTrainingWords();
    if (trainingWords.length === 0) {
      alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –í—Å–µ —Å–ª–æ–≤–∞ –ª–∏–±–æ –∏–∑—É—á–µ–Ω—ã, –ª–∏–±–æ –Ω–∞ –æ—Ç–∫–∞—Ç–µ.');
      return;
    }
    
    setTrainingMode(true);
    const randomWord = trainingWords[Math.floor(Math.random() * trainingWords.length)];
    setCurrentWord(randomWord);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ø—Ä—è–º–æ–π –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞
    const userData = userWordsData[randomWord.id];
    let mode;
    
    if (!userData) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ)
      mode = false;
    } else {
      const directAvailable = userData.correct_attempts < 2 && !getCooldownTime(userData.last_shown, userData.correct_attempts, userData.mode_education, currentTime);
      const revertAvailable = userData.correct_attempts_revert < 2 && !getCooldownTime(userData.last_shown_revert, userData.correct_attempts_revert, userData.mode_education_revert, currentTime);
      
      if (directAvailable && revertAvailable) {
        mode = Math.random() < 0.5;
      } else if (directAvailable) {
        mode = false; // –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥
      } else if (revertAvailable) {
        mode = true; // –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
      } else {
        // –ï—Å–ª–∏ –æ–±–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
        mode = Math.random() < 0.5;
      }
    }
    
    setCurrentMode(mode);
    setUserAnswer('');
    setShowResult(false);
    setAttemptCount(0);
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const updateWordAttempts = async (wordId, isRevertMode, isCorrect) => {
    try {
      const userData = userWordsData[currentWord?.id];
      let me = isRevertMode ? userData?.mode_education_revert : userData?.mode_education;

			const formData = new FormData();
      formData.append("action", "update_word_attempts");
      formData.append("word_id", wordId);
      formData.append("is_revert", isRevertMode ? 1 : 0);
      formData.append("is_correct", isCorrect ? 1 : 0);
      formData.append("is_first_attempt", me ? 0 : 1); // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –µ—Å–ª–∏ attemptCount = 0

			const response = await axios.post(window.myajax.url, formData);

			if (response.data.success) {
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (onRefreshUserData) {
          onRefreshUserData();
        }
			} else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏:', response.data.message);
			}
		} catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ø—ã—Ç–∫–∏:', err.message);
    }
  };


  // –°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–Ω–∞–ª–æ–≥ Education.jsx)
  const resetCategoryFromTraining = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –í—Å–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')) {
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryWords = dictionaryWords.filter(word => {
        if (categoryId === 0) return true;
        const categoryIdNum = parseInt(categoryId);
        
        if (word.category_id !== undefined) {
          return parseInt(word.category_id) === categoryIdNum;
        }
        if (Array.isArray(word.category_ids) && word.category_ids.length > 0) {
          return word.category_ids.some(id => parseInt(id) === categoryIdNum);
        }
        return false;
      });

      const wordIds = categoryWords.map(word => word.id);
      
      if (wordIds.length === 0) {
        alert('–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞');
        return;
      }

      const formData = new FormData();
      formData.append("action", "reset_training_category");
      formData.append("word_ids", JSON.stringify(wordIds));

      const response = await axios.post(window.myajax.url, formData);

      if (response.data.success) {
        alert('–î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.');
        if (onRefreshUserData) {
          onRefreshUserData();
        }
      } else {
        throw new Error(response.data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err);
      alert('–û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º —Å–∫–æ–±–æ–∫
  const generateAnswerVariants = (text) => {
    if (!text) return [];
    
    const variants = [];
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –¢–µ–∫—Å—Ç –ë–ï–ó —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∫–æ–±–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    // –ù–∞–ø—Ä–∏–º–µ—Ä: "—Ä—É—á–∫–∞ (–¥–≤–µ—Ä–Ω–∞—è)" -> "—Ä—É—á–∫–∞"
    const textWithoutParentheses = text.replace(/\([^)]*\)/g, '').trim();
    if (textWithoutParentheses) variants.push(textWithoutParentheses);
    
    // –í–∞—Ä–∏–∞–Ω—Ç 2: –í–µ—Å—å —Ç–µ–∫—Å—Ç, –Ω–æ –ë–ï–ó —Å–∞–º–∏—Ö —Å–∫–æ–±–æ–∫ (—Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º)
    // –ù–∞–ø—Ä–∏–º–µ—Ä: "—Ä—É—á–∫–∞ (–¥–≤–µ—Ä–Ω–∞—è)" -> "—Ä—É—á–∫–∞ –¥–≤–µ—Ä–Ω–∞—è"
    const fullTextWithoutBrackets = text.replace(/[()]/g, '').trim();
    if (fullTextWithoutBrackets && fullTextWithoutBrackets !== textWithoutParentheses) {
      variants.push(fullTextWithoutBrackets);
    }
    
    return variants;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TrainingInterface
  const handleCheckAnswer = () => {
    if (!currentWord || !userAnswer.trim()) return;

    let correct = false;
    let correctAnswers = [];

    if (currentMode) {
      // –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –∂–¥–µ–º —Å–ª–æ–≤–æ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–∞–º–æ —Å–ª–æ–≤–æ)
      correctAnswers = [currentWord.word];
    } else {
      // –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∂–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - –ø–µ—Ä–µ–≤–æ–¥—ã)
      correctAnswers = [
        currentWord.translation_1,
        currentWord.translation_2,
        currentWord.translation_3
      ].filter(t => t && t !== '0');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ translation_input_variable
      if (currentWord.translation_input_variable && currentWord.translation_input_variable.trim()) {
        const additionalVariants = currentWord.translation_input_variable
          .split(',')
          .map(v => v.trim())
          .filter(v => v.length > 0);
        console.log('üîç translation_input_variable:', currentWord.translation_input_variable);
        console.log('üîç Additional variants:', additionalVariants);
        correctAnswers.push(...additionalVariants);
      }
    }

    console.log('üìù Current word object:', currentWord);
    console.log('‚úÖ All correct answers (raw):', correctAnswers);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const allAcceptableVariants = [];
    correctAnswers.forEach(answer => {
      const variants = generateAnswerVariants(answer);
      allAcceptableVariants.push(...variants);
    });
    
    console.log('‚úÖ All acceptable variants:', allAcceptableVariants);
    console.log('üë§ User answer (raw):', userAnswer);

    const normalizedUserAnswer = normalizeString(userAnswer);
    console.log('üë§ User answer (normalized):', normalizedUserAnswer);
    
    correct = allAcceptableVariants.some(answer => {
      const normalizedAnswer = normalizeString(answer);
      console.log('üîÑ Comparing:', `"${normalizedUserAnswer}"`, 'vs', `"${normalizedAnswer}"`);
      return normalizedAnswer === normalizedUserAnswer;
    });

    console.log('üéØ Result:', correct);

    setIsCorrect(correct);
    setShowResult(true);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    updateWordAttempts(currentWord.id, currentMode, correct);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    setAttemptCount(prev => prev + 1);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setTimeout(() => {
      const nextButton = document.querySelector('[data-next-word]');
      if (nextButton) {
        nextButton.focus();
      }
    }, 100);
  };

  const handleNextWord = () => {
    const trainingWords = getTrainingWords();
    if (trainingWords.length === 0) {
      setTrainingMode(false);
      alert('–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω—ã!');
      return;
    }
    
    const randomWord = trainingWords[Math.floor(Math.random() * trainingWords.length)];
    setCurrentWord(randomWord);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const userData = userWordsData[randomWord.id];
    let mode;
    
    if (!userData) {
      mode = false;
    } else {
      const directAvailable = userData.correct_attempts < 2 && !getCooldownTime(userData.last_shown, userData.correct_attempts, userData.mode_education, currentTime);
      const revertAvailable = userData.correct_attempts_revert < 2 && !getCooldownTime(userData.last_shown_revert, userData.correct_attempts_revert, userData.mode_education_revert, currentTime);
      
      if (directAvailable && revertAvailable) {
        mode = Math.random() < 0.5;
      } else if (directAvailable) {
        mode = false;
      } else {
        mode = true;
      }
    }
    
    setCurrentMode(mode);
    setUserAnswer('');
    setShowResult(false);
    setAttemptCount(0);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    setTimeout(() => {
      const inputField = document.querySelector('[data-training-input]');
      if (inputField) {
        inputField.focus();
      }
    }, 100);
  };

  const handleFinishTraining = () => {
    setTrainingMode(false);
    setCurrentWord(null);
    setUserAnswer('');
    setShowResult(false);
    setAttemptCount(0);
  };

  // –õ—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å mode_education = 1 –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤
  const handleEasyTraining = async () => {
    if (!categoryId || categoryId === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return;
    }

    if (!confirm('–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–µ–∂–∏–º –ª—ë–≥–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –û—Ç–∫–∞—Ç –±—É–¥–µ—Ç 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 20 —á–∞—Å–æ–≤.')) {
      return;
    }

    try {
      console.log('üéì –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é', categoryId, '–≤ —Ä–µ–∂–∏–º –ª—ë–≥–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
      const formData = new FormData();
      formData.append('action', 'set_category_to_easy_mode');
      formData.append('category_id', categoryId);

      const response = await axios.post(window.myajax.url, formData);
      
      if (response.data.success) {
        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –ª—ë–≥–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (onRefreshUserData) {
          await onRefreshUserData();
        }
        alert('–í—Å–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –ª—ë–≥–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!');
      } else {
        alert('–û—à–∏–±–∫–∞: ' + (response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'));
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', err);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message);
    }
  };

	return (
		<div>
      {!trainingMode && (
        <div className="training-buttons-container">
          <button
            onClick={startTraining}
            className="training-start-button"
          >
            üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
          </button>

          <button
            onClick={handleEasyTraining}
            className="training-start-button"
            style={{
              backgroundColor: '#4CAF50',
            }}
            title="–û—Ç–∫–∞—Ç 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 20 —á–∞—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
          >
            üòä –õ—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
          </button>
          
          <div className="training-control-buttons">
            <button
              onClick={() => setShowHelp(true)}
              className="training-help-button"
              title="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            >
              ‚ùì –°–ø—Ä–∞–≤–∫–∞
            </button>
            
            <button
              onClick={() => {
                console.log('–ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞–∂–∞—Ç–∞!');
                resetCategoryFromTraining();
              }}
              className="training-clear-button"
            >
              üö´ –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      <HelpModal isOpen={showHelp} onClose={() => setShowHelp(false)} />

      {trainingMode && (
        <TrainingInterface
          currentWord={currentWord}
          currentMode={currentMode}
          userAnswer={userAnswer}
          setUserAnswer={setUserAnswer}
          showResult={showResult}
          isCorrect={isCorrect}
          onCheckAnswer={handleCheckAnswer}
          onNextWord={handleNextWord}
          onFinishTraining={handleFinishTraining}
          inEducationMode={(() => {
            const userData = userWordsData[currentWord?.id];
            return currentMode ? userData?.mode_education_revert : userData?.mode_education;
          })()}
        />
      )}

      {!trainingMode && (() => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ dictionaryWords
        const categoryWords = dictionaryWords.filter(word => {
          if (categoryId === 0) return true;
          const categoryIdNum = parseInt(categoryId);
          
          // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞ category_ids, —Ç–∞–∫ –∏ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ category_id
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—á–Ω—ã–π category_id
          if (word.category_id !== undefined) {
            return parseInt(word.category_id) === categoryIdNum;
          }
          // –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ category_ids (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ category_id –Ω–µ—Ç)
          if (Array.isArray(word.category_ids) && word.category_ids.length > 0) {
            return word.category_ids.some(id => parseInt(id) === categoryIdNum);
          }
          return false;
        });

        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
        const dictionaryWordsById = {};
        dictionaryWords.forEach(word => {
          dictionaryWordsById[word.id] = word;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const CustomCategoryComponent = getCustomCategoryComponent(dictionaryId, categoryId);
        
        if (CustomCategoryComponent) {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å displayStatuses –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
          const displayStatuses = {};
          categoryWords.forEach(word => {
            displayStatuses[word.id] = getWordDisplayStatus(word.id);
          });
          
          // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          return (
            <CustomCategoryComponent
              category={{ id: categoryId, category_name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + categoryId }}
              words={categoryWords}
              dictionaryId={dictionaryId}
              dictionaryWords={dictionaryWords}
              dictionaryWordsById={dictionaryWordsById}
              userWordsData={userWordsData}
              displayStatuses={displayStatuses}
              editingWordId={editingWordId}
              onToggleEdit={toggleEdit}
              onRefreshDictionaryWords={onRefreshDictionaryWords}
              onRefreshUserData={onRefreshUserData}
              formatTime={formatTime}
              mode="examen"
              currentTime={currentTime}
            />
          );
        }

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        const realWords = categoryWords.map((word) => {
          const displayStatus = getWordDisplayStatus(word.id);
          const userData = userWordsData[word.id];
          
            return (
              <WordRow
                key={word.id}
                word={word}
                userData={userData}
                displayStatus={displayStatus}
                formatTime={formatTime}
                dictionaryId={dictionaryId}
                editingWordId={editingWordId}
                onToggleEdit={toggleEdit}
                onRefreshDictionaryWords={onRefreshDictionaryWords}
                onDeleteWord={handleDeleteWord}
                mode="examen"
              />
            );
        });

        // –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        const wordManagementBlock = window.myajax && window.myajax.is_admin && categoryId !== 0 ? (
          <li key="word-management" style={{ 
            margin: '20px 0', 
            padding: '15px', 
            backgroundColor: '#e8f5e9', 
            border: '2px solid #4CAF50', 
            borderRadius: '5px',
            listStyle: 'none'
          }}>
            <WordManagement 
              dictionaryId={dictionaryId}
              categoryId={categoryId}
              onWordsChanged={onRefreshDictionaryWords}
            />
          </li>
        ) : null;

        // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ production)
        console.log('window.myajax', window.myajax);
        if (ENABLE_TEST_DATA && window.myajax && window.myajax.is_admin) {
          const separator = (
            <li key="test-separator" style={{ 
              margin: '20px 0', 
              padding: '10px', 
              background: '#f0f0f0', 
              textAlign: 'center',
              fontWeight: 'bold',
              color: '#666',
              borderTop: '2px dashed #999',
              borderBottom: '2px dashed #999'
            }}>
              ‚¨áÔ∏è –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í) ‚¨áÔ∏è
            </li>
          );
          
          const allTestWords = [...testWords, ...additionalTestWords];
          const testRows = allTestWords.map((word) => {
            const displayStatus = testDisplayStatuses[word.id];
            const userData = testUserData[word.id];
            
            return (
              <WordRow
                key={`test-${word.id}`}
                word={word}
                userData={userData}
                displayStatus={displayStatus}
                formatTime={formatTime}
                dictionaryId={dictionaryId}
                editingWordId={editingWordId}
                onToggleEdit={toggleEdit}
                onRefreshDictionaryWords={onRefreshDictionaryWords}
                mode="examen"
              />
            );
          });
          
          return (
            <ul className="words-education-list">
              {[...realWords, wordManagementBlock, separator, ...testRows].filter(Boolean)}
            </ul>
          );
        }

        return (
          <ul className="words-education-list">
            {realWords}
          </ul>
        );
      })()}
		</div>
	);
};

export default Examen;
