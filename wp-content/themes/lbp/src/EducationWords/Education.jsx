import axios from "axios";
import TrainingInterface from "../components/TrainingInterface";
import WordRow from "../components/WordRow";
import WordManagement from "../components/WordManagement";
import { getCustomCategoryComponent } from "../custom/config/customComponents";
import { normalizeString, getWordDisplayStatusEducation } from "../custom/utils/helpers";

const { useEffect, useState } = wp.element;

const Education = ({ categoryId, dictionaryId, userWordsData = {}, dictionaryWords = [], onRefreshUserData, onRefreshDictionaryWords }) => {
  const [words, setWords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingWordId, setEditingWordId] = useState(null); // ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–ª–æ–≤–∞
  const [trainingMode, setTrainingMode] = useState(false); // –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const [currentWord, setCurrentWord] = useState(null); // –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const [userAnswer, setUserAnswer] = useState(''); // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [showResult, setShowResult] = useState(false); // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const [isCorrect, setIsCorrect] = useState(false); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
  const [currentMode, setCurrentMode] = useState(null); // –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–ø—Ä—è–º–æ–π/–æ–±—Ä–∞—Ç–Ω—ã–π)

  const fetchWords = async () => {
    try {
      setLoading(true);
      
      // –õ–æ–≥–∏—Ä—É–µ–º ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      console.log('üìä Education - dictionaryId:', dictionaryId, 'categoryId:', categoryId);
      
      const formData = new FormData();
      formData.append("action", "get_words_by_category");
      formData.append("category_id", categoryId);

      const response = await axios.post(window.myajax.url, formData);

      if (response.data.success) {
        setError(null);
        setWords(response.data.data);
      } else {
        throw new Error(response.data.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤");
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchWords();
  }, [categoryId]);

  const toggleEdit = (id) => {
    setEditingWordId((prevId) => (prevId === id ? null : id));
  };

  // –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
  const handleDeleteWord = async (wordId) => {
    try {
      const formData = new FormData();
      formData.append('action', 'delete_word');
      formData.append('word_id', wordId);

      const response = await axios.post(window.myajax.url, formData);
      
      if (response.data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        if (onRefreshDictionaryWords) {
          onRefreshDictionaryWords();
        }
      } else {
        alert('–û—à–∏–±–∫–∞: ' + (response.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'));
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ (easy_correct –ò–õ–ò easy_correct_revert = 1)
  const isWordLearned = (wordId) => {
    const userData = userWordsData[wordId];
    if (!userData) return false;
    
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω (easy_education = 0), —Å—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã–º
    if (userData.easy_education === 0) return true;
    
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    return userData.easy_correct === 1 || userData.easy_correct_revert === 1;
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getWordDisplayStatus = (wordId) => {
    return getWordDisplayStatusEducation(userWordsData[wordId]);
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (easy_education = 1)
  const getTrainingWords = () => {
    console.log('getTrainingWords: categoryId =', categoryId);
    console.log('getTrainingWords: dictionaryWords.length =', dictionaryWords.length);
    console.log('getTrainingWords: userWordsData =', userWordsData);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
    if (dictionaryWords.length > 0) {
      console.log('First word structure:', dictionaryWords[0]);
    }
    
    const categoryWords = dictionaryWords.filter(word => {
      if (categoryId === 0) return true;
      const categoryIdNum = parseInt(categoryId);
      console.log(`Checking word ${word.id}: category_ids =`, word.category_ids, 'type:', typeof word.category_ids);
      
      if (Array.isArray(word.category_ids)) {
        const hasCategory = word.category_ids.some(id => parseInt(id) === categoryIdNum);
        console.log(`Word ${word.id} has category ${categoryIdNum}:`, hasCategory);
        return hasCategory;
      }
      return false;
    });

    console.log('getTrainingWords: categoryWords.length =', categoryWords.length);

    const trainingWords = categoryWords.filter(word => {
      const userData = userWordsData[word.id];
      console.log(`Word ${word.id} (${word.word}): userData =`, userData);
      return userData && userData.easy_education === 1;
    });

    console.log('getTrainingWords: trainingWords.length =', trainingWords.length);
    return trainingWords;
  };

  // –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  const startTraining = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!window.myajax || !window.myajax.is_logged_in) {
      alert('–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }
    
    const trainingWords = getTrainingWords();
    if (trainingWords.length === 0) {
      alert('–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ "–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", —Å–µ–π—á–∞—Å –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞ –Ω–∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≤ —ç—Ç–æ–º –≤–æ–æ–±—â–µ –≥–ª–∞–≤–Ω—ã–π —Å–º—ã—Å–ª —Ä–∞–∑–¥–µ–ª–∞ "–ò–∑—É—á–µ–Ω–∏–µ".');
      return;
    }
    
    setTrainingMode(true);
    const randomWord = trainingWords[Math.floor(Math.random() * trainingWords.length)];
    setCurrentWord(randomWord);
    setCurrentMode(Math.random() < 0.5); // –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
    setUserAnswer('');
    setShowResult(false);
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const updateWordProgress = async (wordId, isRevertMode) => {
    try {
      const formData = new FormData();
      formData.append("action", "update_word_progress");
      formData.append("word_id", wordId);
      formData.append("is_revert", isRevertMode ? 1 : 0);

      const response = await axios.post(window.myajax.url, formData);

      if (response.data.success) {
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (onRefreshUserData) {
          onRefreshUserData();
        }
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', response.data.message);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', err.message);
    }
  };


  // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const resetCategoryProgress = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏? –í—Å–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–µ–≥–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ.')) {
      return;
    }

    try {
      const formData = new FormData();
      formData.append("action", "reset_category_progress");
      formData.append("category_id", categoryId);

      const response = await axios.post(window.myajax.url, formData);

      if (response.data.success) {
        alert('–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (onRefreshUserData) {
          onRefreshUserData();
        }
      } else {
        throw new Error(response.data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  // –°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
  const resetCategoryFromTraining = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è? –í—Å–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')) {
      return;
    }

    try {
      const formData = new FormData();
      formData.append("action", "reset_category_from_training");
      formData.append("category_id", categoryId);

      const response = await axios.post(window.myajax.url, formData);

      if (response.data.success) {
        alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è! –°–ª–æ–≤–∞ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (onRefreshUserData) {
          onRefreshUserData();
        }
      } else {
        throw new Error(response.data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TrainingInterface
  const handleCheckAnswer = () => {
    if (!currentWord || !userAnswer.trim()) return;

    let correct = false;
    let correctAnswers = [];

    if (currentMode) {
      // –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –∂–¥–µ–º —Å–ª–æ–≤–æ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–∞–º–æ —Å–ª–æ–≤–æ)
      correctAnswers = [currentWord.word];
    } else {
      // –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∂–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - –ø–µ—Ä–µ–≤–æ–¥—ã)
      correctAnswers = [
        currentWord.translation_1,
        currentWord.translation_2,
        currentWord.translation_3
      ].filter(t => t && t !== '0');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ translation_input_variable
      if (currentWord.translation_input_variable && currentWord.translation_input_variable.trim()) {
        const additionalVariants = currentWord.translation_input_variable
          .split(',')
          .map(v => v.trim())
          .filter(v => v.length > 0);
        console.log('üîç translation_input_variable:', currentWord.translation_input_variable);
        console.log('üîç Additional variants:', additionalVariants);
        correctAnswers.push(...additionalVariants);
      }
    }

    console.log('üìù Current word object:', currentWord);
    console.log('‚úÖ All correct answers:', correctAnswers);
    console.log('üë§ User answer (raw):', userAnswer);

    const normalizedUserAnswer = normalizeString(userAnswer);
    console.log('üë§ User answer (normalized):', normalizedUserAnswer);
    
    correct = correctAnswers.some(answer => {
      const normalizedAnswer = normalizeString(answer);
      console.log('üîÑ Comparing:', `"${normalizedUserAnswer}"`, 'vs', `"${normalizedAnswer}"`);
      return normalizedAnswer === normalizedUserAnswer;
    });

    console.log('üéØ Result:', correct);

    setIsCorrect(correct);
    setShowResult(true);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    if (correct) {
      updateWordProgress(currentWord.id, currentMode);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setTimeout(() => {
      const nextButton = document.querySelector('[data-next-word]');
      if (nextButton) {
        nextButton.focus();
      }
    }, 100);
  };

  const handleNextWord = () => {
    const trainingWords = getTrainingWords();
    if (trainingWords.length === 0) {
      setTrainingMode(false);
      return;
    }
    
    const randomWord = trainingWords[Math.floor(Math.random() * trainingWords.length)];
    setCurrentWord(randomWord);
    setCurrentMode(Math.random() < 0.5); // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    setUserAnswer('');
    setShowResult(false);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    setTimeout(() => {
      const inputField = document.querySelector('[data-training-input]');
      if (inputField) {
        inputField.focus();
      }
    }, 100);
  };

  const handleFinishTraining = () => {
    setTrainingMode(false);
    setCurrentWord(null);
    setUserAnswer('');
    setShowResult(false);
  };

  return (
    <div>
      {!trainingMode && (
        <div className="training-buttons-container">
          <button
            onClick={startTraining}
            className="training-start-button"
          >
            üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
          </button>
          
          <div className="training-control-buttons">
            <button
              onClick={resetCategoryProgress}
              className="training-reset-button"
            >
              üìö –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
            </button>
            
            <button
              onClick={resetCategoryFromTraining}
              className="training-clear-button"
            >
              üö´ –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {trainingMode && (
        <TrainingInterface
          currentWord={currentWord}
          currentMode={currentMode}
          userAnswer={userAnswer}
          setUserAnswer={setUserAnswer}
          showResult={showResult}
          isCorrect={isCorrect}
          onCheckAnswer={handleCheckAnswer}
          onNextWord={handleNextWord}
          onFinishTraining={handleFinishTraining}
        />
      )}

      {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤...</p>}
      {error && <p style={{ color: "red" }}>–û—à–∏–±–∫–∞: {error}</p>}
      {!loading && !error && !trainingMode && (() => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ dictionaryWords
        const categoryWords = dictionaryWords.filter(word => {
          if (categoryId === 0) return true;
          const categoryIdNum = parseInt(categoryId);
          if (Array.isArray(word.category_ids)) {
            return word.category_ids.some(id => parseInt(id) === categoryIdNum);
          }
          return false;
        });

        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
        const dictionaryWordsById = {};
        dictionaryWords.forEach(word => {
          dictionaryWordsById[word.id] = word;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const CustomCategoryComponent = getCustomCategoryComponent(dictionaryId, categoryId);
        
        if (CustomCategoryComponent) {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å displayStatuses –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
          const displayStatuses = {};
          categoryWords.forEach(word => {
            displayStatuses[word.id] = getWordDisplayStatus(word.id);
          });
          
          // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          return (
            <CustomCategoryComponent
              category={{ id: categoryId, category_name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + categoryId }}
              words={categoryWords}
              dictionaryId={dictionaryId}
              dictionaryWords={dictionaryWords}
              dictionaryWordsById={dictionaryWordsById}
              userWordsData={userWordsData}
              displayStatuses={displayStatuses}
              editingWordId={editingWordId}
              onToggleEdit={toggleEdit}
              onRefreshDictionaryWords={onRefreshDictionaryWords}
              onRefreshUserData={onRefreshUserData}
              mode="education"
            />
          );
        }

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        return (
          <ul className="words-education-list">
            {categoryWords.map((word) => {
              const displayStatus = getWordDisplayStatus(word.id);
              const userData = userWordsData[word.id];
              
              return (
                <WordRow
                  key={word.id}
                  word={word}
                  userData={userData}
                  displayStatus={displayStatus}
                  dictionaryId={dictionaryId}
                  editingWordId={editingWordId}
                  onToggleEdit={toggleEdit}
                  onRefreshDictionaryWords={onRefreshDictionaryWords}
                  onDeleteWord={handleDeleteWord}
                  mode="education"
                />
              );
            })}
            
            {/* –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) */}
            {window.myajax && window.myajax.is_admin && categoryId !== 0 && (
              <li key="word-management" style={{ 
                margin: '20px 0', 
                padding: '15px', 
                backgroundColor: '#e8f5e9', 
                border: '2px solid #4CAF50', 
                borderRadius: '5px',
                listStyle: 'none'
              }}>
                <WordManagement 
                  dictionaryId={dictionaryId}
                  categoryId={categoryId}
                  onWordsChanged={onRefreshDictionaryWords}
                />
              </li>
            )}
          </ul>
        );
      })()}
    </div>
  );
};

export default Education;
