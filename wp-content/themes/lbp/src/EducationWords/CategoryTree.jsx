import axios from "axios";
const { useEffect, useState } = wp.element;

const CategoryTree = ({ dictionaryId, onCategoryClick, dictionaryWords = [], categories: propCategories = [], loadingCategories: propLoading = false }) => {
  const [categories, setCategories] = useState(propCategories); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ–ø–æ–≤
  const [loading, setLoading] = useState(propLoading); // –ò—Å–ø–æ–ª—å–∑—É–µ–º loading –∏–∑ –ø—Ä–æ–ø–æ–≤
  const [error, setError] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 50 —Å–ª–æ–≤
  const generateFakeCategories = (words) => {
    console.log('üîß CategoryTree: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è', words.length, '—Å–ª–æ–≤');
    const wordsPerCategory = 50;
    const fakeCategories = [];
    
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: category_id –∫ —Å–ª–æ–≤–∞–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Dictionary.jsx
    // –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    for (let i = 0; i < words.length; i += wordsPerCategory) {
      const startNum = i + 1;
      const endNum = Math.min(i + wordsPerCategory, words.length);
      const categoryId = -(Math.floor(i / wordsPerCategory) + 1);
      
      fakeCategories.push({
        id: categoryId,
        name: `${startNum}-${endNum}`,
        parent_id: 0,
        children: []
      });
    }
    
    return [{
      id: 0,
      name: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
      parent_id: null,
      children: fakeCategories
    }];
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–æ–ø–∞–º–∏
  useEffect(() => {
    setCategories(propCategories);
  }, [propCategories]);

  useEffect(() => {
    setLoading(propLoading);
  }, [propLoading]);

  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ Dictionary.jsx
  // CategoryTree —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—ã

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const renderCategoryTree = (tree, subCat = false) => {
    return (
      <ul className={subCat ? 'category-three-sub' : 'category-three'}>
        {tree.map((category) => (
          <li
            onClick={() => subCat && onCategoryClick && onCategoryClick(category)}
            key={category.id}
          >
            <span
              className="category-three-name"
            >
              {category.name}
            </span>
            {category.children && category.children.length > 0 && renderCategoryTree(category.children, true)}
          </li>
        ))}
      </ul>
    );
  };

  return (
    <div>
      {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</p>}
      {error && <p style={{ color: "red" }}>–û—à–∏–±–∫–∞: {error}</p>}
      {!loading && !error && renderCategoryTree(categories)}
    </div>
  );
};

export default CategoryTree;
