import React from 'react';
import CategoryLayout from '../layouts/CategoryLayout';
import Word from '../components/Word';
import useGroupCheck from '../hooks/useGroupCheck';
import { WordProvider, useWordFunctions } from '../contexts/WordContext';
import useGroupWords from '../hooks/useGroupWords';
import { createGroupCheckHandlers } from '../utils/groupHandlers';

/**
 * –ë–ê–ó–û–í–´–ô –®–ê–ë–õ–û–ù –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * 
 * –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
const BaseTemplate = (props) => {
  // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã (–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
  const groupCheck1 = useGroupCheck();
  const groupWords1 = useGroupWords();
  
  return (
    <CategoryLayout {...props}>
      {({ getWordPropsByText, stats, checkGroupWords, getWordIdByText }) => {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
        const group1Handlers = createGroupCheckHandlers(groupWords1, groupCheck1, checkGroupWords, getWordIdByText);
        
        return (
          <WordProvider getWordPropsByText={getWordPropsByText} getWordIdByText={getWordIdByText}>
            <div className="custom-category">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <h2>{props.category.category_name}</h2>
              <p>üìö –í—Å–µ–≥–æ: {stats.total} | ‚úÖ –ò–∑—É—á–µ–Ω–æ: {stats.learned}</p>
              
              {/* –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å */}
              <div className="my-group">
                <h3>–ú–æ—è –≥—Ä—É–ø–ø–∞ —Å–ª–æ–≤</h3>
                
                {/* –°–ª–æ–≤–∞ –≥—Ä—É–ø–ø—ã - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ */}
                <ul className="words-education-list">
                  <WordInGroup wordText="cipars" groupCheck={groupCheck1} groupWords={groupWords1} />
                  <WordInGroup wordText="skaitlis" groupCheck={groupCheck1} groupWords={groupWords1} />
                  <WordInGroup wordText="mƒ´nuss" groupCheck={groupCheck1} groupWords={groupWords1} />
                </ul>
                
                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <div className="group-controls">
                  <button onClick={group1Handlers.handleCheck} className="btn-check-group">
                    ‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                  </button>
                  <button onClick={group1Handlers.handleReset} className="btn-reset-group">
                    üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </WordProvider>
        );
      }}
    </CategoryLayout>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
 */
const WordInGroup = ({ wordText, groupCheck, groupWords, hideAvailableWord = false, vertical = false }) => {
  const { getWordPropsByText, getWordIdByText } = useWordFunctions();
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
  React.useEffect(() => {
    if (groupWords) {
      groupWords.addWord(wordText);
    }
  }, [wordText, groupWords]);
  
  const wordId = getWordIdByText(wordText) || 0;
  const props = getWordPropsByText(wordText, {
    type: 'field',              // 'field' –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞, 'row' –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    direction: 'direct',        // 'direct' (lat‚Üírus), 'reverse' (rus‚Üílat), 'both'
    hideAvailableWord: hideAvailableWord,   // true - —Å–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–∞–¥–æ –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å
    vertical: vertical,         // true - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    directValue: groupCheck.answers[wordId] || '',
    onDirectChange: groupCheck.setAnswer,
    highlightDirectCorrect: groupCheck.results[wordId] === true,
    highlightDirectIncorrect: groupCheck.results[wordId] === false,
  });
  
  return props ? <Word {...props} /> : <div>–°–ª–æ–≤–æ "{wordText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>;
};

export default BaseTemplate;

