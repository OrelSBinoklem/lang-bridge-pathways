import React from 'react';
import axios from 'axios';
import { checkTranslation, getWordDisplayStatusEducation, getWordDisplayStatusExamen, formatTime, getCooldownTime, groupWordsByStatus, getWordsStats } from '../utils/helpers';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π layout –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç render-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * <CategoryLayout {...props}>
 *   {({ renderWord, renderGroup, stats, helpers }) => (
 *     // –í–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 *   )}
 * </CategoryLayout>
 */
const CategoryLayout = ({
  category,
  words,
  dictionaryId,
  dictionaryWords,
  dictionaryWordsById,
  userWordsData,
  displayStatuses,
  editingWordId,
  onToggleEdit,
  onRefreshDictionaryWords,
  onRefreshUserData,
  formatTime,
  mode,
  currentTime,
  children, // Render-—Ñ—É–Ω–∫—Ü–∏—è
}) => {
  
  // ============================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================================================
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—É–ø–ø—É —Å–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ë–î
   * @param {array} wordIds - –ú–∞—Å—Å–∏–≤ ID —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @param {object} answers - –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–æ–≤ { [wordId]: "–æ—Ç–≤–µ—Ç" }
   * @param {boolean} isRevert - –¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: true = –æ–±—Ä–∞—Ç–Ω—ã–π (rus‚Üílat), false = –ø—Ä—è–º–æ–π (lat‚Üírus)
   * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ { [wordId]: true/false }
   */
  const checkGroupWords = async (wordIds, answers, isRevert = false) => {
    const results = {};
    let hasChanges = false;
    
    console.log('üîç checkGroupWords –Ω–∞—á–∞–ª–æ', { wordIds, isRevert });
    
    for (const wordId of wordIds) {
      const word = dictionaryWordsById[wordId];
      if (!word) {
        console.warn(`‚ö†Ô∏è –°–ª–æ–≤–æ ${wordId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        continue;
      }
      
      const answer = answers[wordId] || '';
      console.log(`üìù –°–ª–æ–≤–æ ${wordId}: –æ—Ç–≤–µ—Ç = "${answer}"`);
      
      if (answer.trim()) {
        const isCorrect = checkTranslation(word, answer, isRevert);
        console.log(`‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${isCorrect ? '‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}`);
        
        results[wordId] = isCorrect;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
        try {
          const formData = new FormData();
          formData.append("action", "update_word_attempts");
          formData.append("word_id", wordId);
          formData.append("is_revert", isRevert ? 1 : 0);
          formData.append("is_correct", isCorrect ? 1 : 0);
          formData.append("is_first_attempt", 1);
          
          console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ë–î...', { wordId, isCorrect, isRevert });
          const response = await axios.post(window.myajax.url, formData);
          console.log('üì• –û—Ç–≤–µ—Ç –ë–î:', response.data);
          
          hasChanges = true;
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', err);
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log(`üîÑ hasChanges = ${hasChanges}, onRefreshUserData = ${!!onRefreshUserData}`);
    if (hasChanges && onRefreshUserData) {
      console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º onRefreshUserData...');
      await onRefreshUserData();
      console.log('‚úÖ onRefreshUserData –∑–∞–≤–µ—Ä—à—ë–Ω');
    }
    
    return results;
  };
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å props –¥–ª—è Word –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  const getWordProps = (wordId, extraProps = {}) => {
    return {
      key: wordId,
      wordId,
      dictionaryWords,
      userWordsData,
      displayStatus: displayStatuses[wordId],
      dictionaryId,
      editingWordId,
      onToggleEdit,
      onRefreshDictionaryWords,
      mode,
      currentTime,
      ...extraProps,
    };
  };
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ ID
   */
  const getWord = (wordId) => {
    return dictionaryWordsById[wordId];
  };
  
  /**
   * –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å: { [categoryId]: { [word]: wordObject } }
   */
  const wordIndexByCategory = {};
  dictionaryWords.forEach(word => {
    if (Array.isArray(word.category_ids)) {
      word.category_ids.forEach(catId => {
        if (!wordIndexByCategory[catId]) {
          wordIndexByCategory[catId] = {};
        }
        wordIndexByCategory[catId][word.word] = word;
      });
    }
  });
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  const getWordByText = (wordText, categoryId = category.id) => {
    return wordIndexByCategory[categoryId]?.[wordText] || null;
  };
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (—Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
   */
  const getWordIdByText = (wordText, categoryId = category.id) => {
    const word = getWordByText(wordText, categoryId);
    return word?.id || null;
  };
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  const isWordInCurrentCategory = (wordText, categoryId = category.id) => {
    return wordIndexByCategory[categoryId]?.hasOwnProperty(wordText) || false;
  };
  
  /**
   * –•–µ–ª–ø–µ—Ä –¥–ª—è Word —Å —Ç–µ–∫—Å—Ç–æ–º —Å–ª–æ–≤–∞
   */
  const getWordPropsByText = (wordText, extraProps = {}) => {
    const wordId = getWordIdByText(wordText);
    if (!wordId) {
      console.warn(`–°–ª–æ–≤–æ "${wordText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.id}`);
      return null;
    }
    return getWordProps(wordId, extraProps);
  };
  
  /**
   * –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞
   */
  const filterWords = (filterFn) => {
    return words.filter(filterFn);
  };
  
  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
   */
  const groupByStatus = () => {
    return {
      learned: words.filter(w => displayStatuses[w.id]?.fullyLearned),
      learning: words.filter(w => !displayStatuses[w.id]?.fullyLearned),
      all: words,
    };
  };
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  const getStats = () => {
    const learned = words.filter(w => displayStatuses[w.id]?.fullyLearned).length;
    const total = words.length;
    
    return {
      total,
      learned,
      learning: total - learned,
      progress: total > 0 ? Math.round((learned / total) * 100) : 0,
    };
  };
  
  // ============================================================================
  // RENDER HELPERS
  // ============================================================================
  
  /**
   * Render-–ø—Ä–æ–ø—Å—ã –¥–ª—è –¥–µ—Ç–µ–π
   */
  const renderProps = {
    // –î–∞–Ω–Ω—ã–µ
    category,
    words,
    dictionaryWordsById,
    userWordsData,
    displayStatuses,
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è Word
    getWordProps,      // (wordId, extraProps) => props –¥–ª—è Word
    getWord,           // (wordId) => word –æ–±—ä–µ–∫—Ç
    getWordByText,     // (wordText, categoryId?) => word –æ–±—ä–µ–∫—Ç
    getWordIdByText,   // (wordText, categoryId?) => wordId
    getWordPropsByText, // (wordText, extraProps) => props –¥–ª—è Word
    isWordInCurrentCategory, // (wordText, categoryId?) => boolean
    wordIndexByCategory, // { [categoryId]: { [word]: wordObject } }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    filterWords,       // (filterFn) => –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    groupByStatus,     // () => {learned, learning, all}
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: getStats(), // {total, learned, learning, progress}
    
    // –ì—Ä—É–ø–ø–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    checkGroupWords,   // (wordIds, answers, isRevert) => results
    
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—Å—ã
    dictionaryId,
    editingWordId,
    onToggleEdit,
    onRefreshDictionaryWords,
    onRefreshUserData,
    mode,
    currentTime,
  };
  
  // ============================================================================
  // –†–ï–ù–î–ï–†
  // ============================================================================
  
  return children(renderProps);
};

export default CategoryLayout;

