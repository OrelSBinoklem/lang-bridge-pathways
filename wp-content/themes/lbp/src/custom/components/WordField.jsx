import React, { useState, useEffect } from 'react';
import WordEditor from '../../WordEditor';

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ (–∫–æ–ø–∏—è WordRow)
 * + –¥–æ–±–∞–≤–ª–µ–Ω—ã 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 * 
 * @param {string} direction - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 'direct' (—Ç–æ–ª—å–∫–æ lat‚Üírus), 'reverse' (—Ç–æ–ª—å–∫–æ rus‚Üílat), 'both' (–æ–±–∞)
 * @param {boolean} hideAvailableWord - –°–∫—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–æ/–ø–µ—Ä–µ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–¥–æ –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å (default: false)
 * @param {boolean} vertical - –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (default: false)
 * @param {string} directValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param {string} reverseValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param {function} onDirectChange - –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ: (wordId, value) => void
 * @param {function} onReverseChange - –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ: (wordId, value) => void
 * @param {boolean} highlightDirectCorrect/Incorrect - –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–ª—è
 * @param {boolean} highlightReverseCorrect/Incorrect - –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
 */
const WordField = ({
  word,
  userData,
  displayStatus,
  formatTime,
  dictionaryId,
  editingWordId,
  onToggleEdit,
  onRefreshDictionaryWords,
  showEditButton = true,
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  direction = 'both', // 'direct', 'reverse', 'both'
  hideAvailableWord = false, // –°–∫—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–∞–¥–æ –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å
  vertical = false, // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  directValue = '',
  reverseValue = '',
  onDirectChange = null,
  onReverseChange = null,
  highlightDirectCorrect = false,
  highlightDirectIncorrect = false,
  highlightReverseCorrect = false,
  highlightReverseIncorrect = false,
}) => {
  const [showDirectTooltip, setShowDirectTooltip] = useState(false);
  const [showReverseTooltip, setShowReverseTooltip] = useState(false);
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—à–∫—É –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
  useEffect(() => {
    if (highlightDirectIncorrect) {
      setShowDirectTooltip(true);
      const timer = setTimeout(() => setShowDirectTooltip(false), 10000);
      return () => clearTimeout(timer);
    }
  }, [highlightDirectIncorrect]);
  
  useEffect(() => {
    if (highlightReverseIncorrect) {
      setShowReverseTooltip(true);
      const timer = setTimeout(() => setShowReverseTooltip(false), 10000);
      return () => clearTimeout(timer);
    }
  }, [highlightReverseIncorrect]);
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  const getFieldStyle = (isCorrect, isIncorrect) => {
    const base = {
      border: '1px solid #ced4da',
      borderRadius: '4px',
      padding: '4px 8px',
      fontSize: '14px',
      width: '150px',
      fontFamily: 'inherit',
    };
    if (isCorrect) return { ...base, backgroundColor: '#d4edda', borderColor: '#28a745' };
    if (isIncorrect) return { ...base, backgroundColor: '#f8d7da', borderColor: '#dc3545' };
    return base;
  };
  
  // –†–µ–Ω–¥–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const renderProgressIndicator = () => {
    if (vertical) {
      // –í –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–∞–ª–æ—á–∫–∏, –±–µ–∑ —á—ë—Ä—Ç–æ—á–µ–∫
      return userData && displayStatus.hasAttempts ? (
        <span className={`words-progress-indicator ${
          displayStatus.fullyLearned ? 'fully-learned' : 
          (userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2) ? 'partially-learned' : 'not-learned'
        }`}>
          {displayStatus.fullyLearned ? "‚úì" :
           (userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2) ? '‚úì' : ''}&nbsp;&nbsp;
        </span>
      ) : '';
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å —á—ë—Ä—Ç–æ—á–∫–∞–º–∏
      return userData && displayStatus.hasAttempts ? (
        <span className={`words-progress-indicator ${
          displayStatus.fullyLearned ? 'fully-learned' : 
          (userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2) ? 'partially-learned' : 'not-learned'
        }`}>
          {displayStatus.fullyLearned ? "‚úì" :
           (userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2) ? '‚úì' :
           <span dangerouslySetInnerHTML={{__html: '&mdash;'}} />}&nbsp;&nbsp;
        </span>
      ) : <span>&nbsp;&nbsp;&mdash;&nbsp;&nbsp;</span>;
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (rus‚Üílat)
  const showReverseField = onReverseChange && (direction === 'reverse' || direction === 'both');
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (lat‚Üírus)
  const showDirectField = onDirectChange && (direction === 'direct' || direction === 'both');
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const containerStyle = vertical ? { 
    display: 'flex', 
    flexDirection: 'column', 
    gap: '8px',
    alignItems: 'flex-start' 
  } : {};
  
  return (
    <li key={word.id} style={containerStyle} className={vertical ? 'word-field-vertical' : ''}>
      {/* –°–ª–æ–≤–æ */}
      <span className="words-education-list__word">
        {displayStatus.cooldownRevert ? (
          <span style={{ color: '#ff9800', fontWeight: 'bold' }}>
            ‚è±Ô∏è {formatTime(displayStatus.cooldownRevert)}
          </span>
        ) : (displayStatus.showWord || (showDirectField && !hideAvailableWord)) ? (
          // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ò–õ–ò (–∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ò –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ
          word.word
        ) : showReverseField && !displayStatus.showWord ? (
          // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–≥–∞–¥–∞—Ç—å –ª–∞—Ç—ã—à—Å–∫–æ–µ —Å–ª–æ–≤–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
          <span style={{ position: 'relative', display: 'inline-flex', alignItems: 'center', gap: '8px' }}>
            <input
              type="text"
              value={reverseValue}
              onChange={(e) => onReverseChange(word.id, e.target.value)}
              placeholder="lat"
              style={getFieldStyle(highlightReverseCorrect, highlightReverseIncorrect)}
              className="word-field-inline-input"
            />
            {userData && userData.mode_education_revert === 1 && (
              <span className="learning-mode-text learning-glow">
                üìö –£—á—É
              </span>
            )}
            {showReverseTooltip && (
              <span className="word-field-tooltip">
                ‚úì {word.word}
              </span>
            )}
          </span>
        ) : (displayStatus.showWord || showDirectField) && hideAvailableWord ? (
          // –ï—Å–ª–∏ hideAvailableWord=true –∏ —Å–ª–æ–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ - —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
          <span>&nbsp;</span>
        ) : (
          <span className="words-hidden-text">
            {userData && userData.mode_education_revert === 1 ? (
              <span className="learning-mode-text">
                üìö –£—á—É
              </span>
            ) : (
              word.word.split('').map((char, index) => 
                char === ' ' ? ' ' : '‚ñà '
              ).join('')
            )}
          </span>
        )}
      </span>
      
      {/* –ü–µ—Ä–µ–≤–æ–¥ 1 */}
      <span className="words-education-list__translation_1">
        {renderProgressIndicator()}
        {displayStatus.cooldownDirect ? (
          <span style={{ color: '#ff9800', fontWeight: 'bold' }}>
            ‚è±Ô∏è {formatTime(displayStatus.cooldownDirect)}
          </span>
        ) : (displayStatus.showTranslation || (showReverseField && !hideAvailableWord)) ? (
          // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ò–õ–ò (–∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ò –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
          word.translation_1
        ) : showDirectField && !displayStatus.showTranslation ? (
          // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–≥–∞–¥–∞—Ç—å —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
          <span style={{ position: 'relative', display: 'inline-flex', alignItems: 'center', gap: '8px' }}>
            <input
              type="text"
              value={directValue}
              onChange={(e) => onDirectChange(word.id, e.target.value)}
              placeholder="rus"
              style={getFieldStyle(highlightDirectCorrect, highlightDirectIncorrect)}
              className="word-field-inline-input"
            />
            {userData && userData.mode_education === 1 && (
              <span className="learning-mode-text learning-glow">
                üìö –£—á—É
              </span>
            )}
            {showDirectTooltip && (
              <span className="word-field-tooltip">
                ‚úì {word.translation_1}
                {word.translation_2 && `, ${word.translation_2}`}
                {word.translation_3 && `, ${word.translation_3}`}
              </span>
            )}
          </span>
        ) : (displayStatus.showTranslation || showReverseField) && hideAvailableWord ? (
          // –ï—Å–ª–∏ hideAvailableWord=true –∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
          <span>&nbsp;</span>
        ) : (
          <span className="words-hidden-text">
            {userData && userData.mode_education === 1 ? (
              <span className="learning-mode-text">
                üìö –£—á—É
              </span>
            ) : (
              word.translation_1.split('').map((char, index) => 
                char === ' ' ? ' ' : '‚ñà '
              ).join('')
            )}
          </span>
        )}
      </span>
      
      {/* –ü–µ—Ä–µ–≤–æ–¥ 2 */}
      {word.translation_2 && !displayStatus.cooldownDirect && !hideAvailableWord && (
        <span className="words-education-list__translation_2">
          , {displayStatus.showTranslation || showReverseField ? (
            word.translation_2
          ) : (
            <span className="words-hidden-text">
              {word.translation_2.split('').map((char, index) => 
                char === ' ' ? ' ' : '‚ñà '
              ).join('')}
            </span>
          )}
        </span>
      )}
      
      {/* –ü–µ—Ä–µ–≤–æ–¥ 3 */}
      {word.translation_3 && !displayStatus.cooldownDirect && !hideAvailableWord && (
        <span className="words-education-list__translation_3">
          , {displayStatus.showTranslation || showReverseField ? (
            word.translation_3
          ) : (
            <span className="words-hidden-text">
              {word.translation_3.split('').map((char, index) => 
                char === ' ' ? ' ' : '‚ñà '
              ).join('')}
            </span>
          )}
        </span>
      )}

      {showEditButton && window.myajax && window.myajax.is_admin && (
        <button
          className="edit-button"
          style={{ marginLeft: "10px" }}
          onClick={() => onToggleEdit(word.id)}
        >
          ‚úèÔ∏è
        </button>
      )}

      {editingWordId === word.id && (
        <div style={{ marginTop: "10px", padding: "10px", border: "1px solid #ccc" }}>
          <WordEditor 
            dictionaryId={dictionaryId} 
            word={word} 
            onClose={() => onToggleEdit(null)}
            onRefreshDictionaryWords={onRefreshDictionaryWords}
          />
        </div>
      )}
    </li>
  );
};

export default WordField;

