import React, { useEffect } from 'react';
import { AUDIO_CONFIG, getLanguageConfig, isLanguageSupported } from '../config/audioConfig';

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∑–≤—É–∫–∞
const playAudio = (word, learnLang) => {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    const language = learnLang || AUDIO_CONFIG.DEFAULT_LANGUAGE;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
    if (!isLanguageSupported(language)) {
      console.warn('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫:', language, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:', Object.keys(AUDIO_CONFIG.SUPPORTED_LANGUAGES));
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —è–∑—ã–∫–∞
    const langConfig = getLanguageConfig(language);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é slugify –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const fileName = langConfig.slugify(word) + AUDIO_CONFIG.AUDIO_EXTENSION;
    
    // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const audioPath = `${AUDIO_CONFIG.BASE_PATH}/${langConfig.folder}/audio/${fileName}`;
    
    console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º:', word, `(${language} - ${langConfig.name}) ‚Üí —Ñ–∞–π–ª:`, fileName);
    
    const audio = new Audio(audioPath);
    audio.play().catch(error => {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –¥–ª—è:', word, error.message);
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error.message);
  }
};

const TrainingInterface = ({
  currentWord,
  currentMode,
  userAnswer,
  setUserAnswer,
  showResult,
  isCorrect,
  onCheckAnswer,
  onNextWord,
  onFinishTraining,
  inEducationMode = false
}) => {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–ª–æ–≤–∞
  useEffect(() => {
    if (currentWord) {
      // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–ª–∞—Ç‚Üí—Ä—É—Å)
      // –ü—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ (—Ä—É—Å‚Üí–ª–∞—Ç) –∑–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
      if (!currentMode) {
        const learnLang = currentWord.learn_lang || AUDIO_CONFIG.DEFAULT_LANGUAGE;
        playAudio(currentWord.word, learnLang);
      }
    }
  }, [currentWord, currentMode]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
  useEffect(() => {
    if (showResult && currentMode && currentWord) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ–ª –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è
      setTimeout(() => {
        const learnLang = currentWord.learn_lang || AUDIO_CONFIG.DEFAULT_LANGUAGE;
        playAudio(currentWord.word, learnLang);
      }, 100);
    }
  }, [showResult, currentMode, currentWord]);

  if (!currentWord) return null;

  return (
    <div className="training-interface">
      <button 
        onClick={onFinishTraining}
        className="training-close-button"
        title="–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        type="button"
      >
        √ó
      </button>
      
      <h3 className="training-title">
        {currentMode ? '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –ª–∞—Ç—ã—à—Å–∫–∏–π:' : '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:'}
      </h3>
      
      {!!inEducationMode && (
        <div style={{ color: '#ff9800', marginBottom: '10px', fontWeight: 'bold' }}>
          üìö –°–ª–æ–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è!
        </div>
      )}
      
      <div className="training-word-display">
        {currentMode ? currentWord.translation_1 : currentWord.word}
        
        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –∑–≤—É–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (–ª–∞—Ç‚Üí—Ä—É—Å) */}
        {!currentMode && (
          <button
            onClick={() => {
              const learnLang = currentWord.learn_lang || AUDIO_CONFIG.DEFAULT_LANGUAGE;
              playAudio(currentWord.word, learnLang);
            }}
            className="training-audio-button"
            title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–≤—É–∫"
            type="button"
          >
            üîä
          </button>
        )}
      </div>

      <input
        data-training-input
        type="text"
        value={userAnswer}
        onChange={(e) => setUserAnswer(e.target.value)}
        onKeyPress={(e) => e.key === 'Enter' && !showResult && onCheckAnswer()}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
        autoFocus
        className="training-input"
        disabled={showResult}
      />

      {!showResult ? (
        <button
          onClick={onCheckAnswer}
          disabled={!userAnswer.trim()}
          className="training-button"
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        </button>
      ) : (
        <div>
          <div className={`training-result ${isCorrect ? 'correct' : 'incorrect'}`}>
            {isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
          </div>
          
          
            {!isCorrect && (
              <div className="training-correct-answer">
                <strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</strong>
                {currentMode ? (
                  <div 
                    className="correct-answer-with-audio"
                    onClick={() => {
                      const learnLang = currentWord.learn_lang || AUDIO_CONFIG.DEFAULT_LANGUAGE;
                      playAudio(currentWord.word, learnLang);
                    }}
                    title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞"
                    style={{ cursor: 'pointer' }}
                  >
                    <span className="correct-answer-text">{currentWord.word}</span>
                    <span className="training-audio-button-inline">üîä</span>
                  </div>
                ) : (
                  <span className="correct-answer-text">
                    {' '}{currentWord.translation_1}
                    {currentWord.translation_2 && currentWord.translation_2 !== '0' && `, ${currentWord.translation_2}`}
                    {currentWord.translation_3 && currentWord.translation_3 !== '0' && `, ${currentWord.translation_3}`}
                  </span>
                )}
              </div>
            )}

          <div className="training-controls">
            <button
              data-next-word
              onClick={onNextWord}
              onKeyPress={(e) => e.key === 'Enter' && onNextWord()}
              tabIndex={0}
              className="training-next-button"
            >
              –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            </button>
            
            <button
              onClick={onFinishTraining}
              onKeyPress={(e) => e.key === 'Enter' && onFinishTraining()}
              tabIndex={1}
              className="training-finish-button"
            >
              –ó–∞–≤–µ—Ä—à–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default TrainingInterface;
