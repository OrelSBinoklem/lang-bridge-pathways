import React from 'react';
import WordEditor from '../WordEditor';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
 * 
 * @param {object} word - –û–±—ä–µ–∫—Ç —Å–ª–æ–≤–∞: {id, word, translation_1, translation_2, translation_3, learn_lang, category_ids, ...}
 * @param {object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ª–æ–≤—É: {correct_attempts, correct_attempts_revert, mode_education, mode_education_revert, last_shown, last_shown_revert, easy_education, easy_correct, easy_correct_revert, ...}
 * @param {object} displayStatus - –°—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {showWord, showTranslation, fullyLearned, hasAttempts, cooldownDirect, cooldownRevert}
 * @param {function} formatTime - –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è mode='examen'): (milliseconds) => string (–Ω–∞–ø—Ä–∏–º–µ—Ä "19:30")
 * @param {number} dictionaryId - ID —Å–ª–æ–≤–∞—Ä—è
 * @param {number} editingWordId - ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–ª–æ–≤–∞ (null –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è)
 * @param {function} onToggleEdit - –ö–æ–ª–±—ç–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: (wordId) => void
 * @param {function} onRefreshDictionaryWords - –ö–æ–ª–±—ç–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: () => void
 * @param {function} onDeleteWord - –ö–æ–ª–±—ç–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: (wordId) => void
 * @param {boolean} showEditButton - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚úèÔ∏è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @param {string} mode - –†–µ–∂–∏–º: 'examen' (—Å –æ—Ç–∫–∞—Ç–∞–º–∏ –∏ —Ç–∞–π–º–µ—Ä–∞–º–∏) –∏–ª–∏ 'education' (–±–µ–∑ –æ—Ç–∫–∞—Ç–æ–≤)
 */
const WordRow = ({
  word,
  userData,
  displayStatus,
  formatTime = null,
  dictionaryId,
  editingWordId,
  onToggleEdit,
  onRefreshDictionaryWords,
  onDeleteWord,
  showEditButton = true,
  mode = 'examen'
}) => {
  const isExamenMode = mode === 'examen' && formatTime;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  /*console.log('WordRow:', {
    wordId: word.id,
    wordText: word.word,
    mode,
    isExamenMode,
    hasFormatTime: !!formatTime,
    userData: userData,
    displayStatus: displayStatus
  });*/
  
  // –†–µ–Ω–¥–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const renderProgressIndicator = () => {
    if (isExamenMode) {
      // –†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞
      return userData && displayStatus.hasAttempts ? (
        <span className={`words-progress-indicator ${
          displayStatus.fullyLearned ? 'fully-learned' : 
          (userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2) ? 'partially-learned' : 'not-learned'
        }`}>
          {displayStatus.fullyLearned ? "‚úì" :
           (userData.correct_attempts >= 2 || userData.correct_attempts_revert >= 2) ? '‚úì' :
           <span dangerouslySetInnerHTML={{__html: '&mdash;'}} />}&nbsp;&nbsp;
        </span>
      ) : <span>&nbsp;&nbsp;&mdash;&nbsp;&nbsp;</span>;
    } else {
      // –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
      return userData && userData.easy_education === 1 ? (
        <span className={`words-progress-indicator ${
          displayStatus.fullyLearned ? 'fully-learned' : 
          displayStatus.showWord || displayStatus.showTranslation ? 'partially-learned' : 'not-learned'
        }`}>
          {displayStatus.fullyLearned ? "‚úì" :
           displayStatus.showWord || displayStatus.showTranslation ? '‚úì' :
           <span dangerouslySetInnerHTML={{__html: '&mdash;'}} />}&nbsp;&nbsp;
        </span>
      ) : <span>&nbsp;&nbsp;&mdash;&nbsp;&nbsp;</span>;
    }
  };

  return (
    <li key={word.id}>
      {/* –°–ª–æ–≤–æ */}
      <span className="words-education-list__word">
        {isExamenMode && displayStatus.cooldownDirect ? (
          <span style={{ color: '#ff9800', fontWeight: 'bold' }}>
            ‚è±Ô∏è {formatTime(displayStatus.cooldownDirect)}
          </span>
        ) : displayStatus.showWord ? (
          word.word
        ) : (
          <span className="words-hidden-text">
            {isExamenMode && userData && userData.mode_education === 1 ? (
              <span className="learning-mode-text">
                üìö –£—á—É
              </span>
            ) : (
              word.word.split('').map((char, index) => 
                char === ' ' ? ' ' : '‚ñà '
              ).join('')
            )}
          </span>
        )}
      </span>
      
      {/* –ü–µ—Ä–µ–≤–æ–¥ 1 */}
      <span className="words-education-list__translation_1">
        {renderProgressIndicator()}
        {isExamenMode && displayStatus.cooldownRevert ? (
          <span style={{ color: '#ff9800', fontWeight: 'bold' }}>
            ‚è±Ô∏è {formatTime(displayStatus.cooldownRevert)}
          </span>
        ) : displayStatus.showTranslation ? (
          word.translation_1
        ) : (
          <span className="words-hidden-text">
            {isExamenMode && userData && userData.mode_education_revert === 1 ? (
              <span className="learning-mode-text">
                üìö –£—á—É
              </span>
            ) : (
              word.translation_1.split('').map((char, index) => 
                char === ' ' ? ' ' : '‚ñà '
              ).join('')
            )}
          </span>
        )}
      </span>
      
      {/* –ü–µ—Ä–µ–≤–æ–¥ 2 */}
      {word.translation_2 && (!isExamenMode || !displayStatus.cooldownRevert) && (
        <span className="words-education-list__translation_2">
          , {displayStatus.showTranslation ? (
            word.translation_2
          ) : (
            <span className="words-hidden-text">
              {word.translation_2.split('').map((char, index) =>
                char === ' ' ? ' ' : '‚ñà '
              ).join('')}
            </span>
          )}
        </span>
      )}
      
      {/* –ü–µ—Ä–µ–≤–æ–¥ 3 */}
      {word.translation_3 && (!isExamenMode || !displayStatus.cooldownRevert) && (
        <span className="words-education-list__translation_3">
          , {displayStatus.showTranslation ? (
            word.translation_3
          ) : (
            <span className="words-hidden-text">
              {word.translation_3.split('').map((char, index) =>
                char === ' ' ? ' ' : '‚ñà '
              ).join('')}
            </span>
          )}
        </span>
      )}

      {showEditButton && window.myajax && window.myajax.is_admin && (
        <>
          <button
            className="edit-button"
            style={{ marginLeft: "10px" }}
            onClick={() => onToggleEdit(word.id)}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ"
          >
            ‚úèÔ∏è
          </button>
          {onDeleteWord && (
            <button
              className="delete-button"
              onClick={() => {
                if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "${word.word}"?`)) {
                  onDeleteWord(word.id);
                }
              }}
              title="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
            >
              üóëÔ∏è
            </button>
          )}
        </>
      )}

      {editingWordId === word.id && (
        <div style={{ marginTop: "10px", padding: "10px", border: "1px solid #ccc" }}>
          <WordEditor 
            dictionaryId={dictionaryId} 
            word={word} 
            onClose={() => onToggleEdit(null)}
            onRefreshDictionaryWords={onRefreshDictionaryWords}
          />
        </div>
      )}
    </li>
  );
};

export default WordRow;
